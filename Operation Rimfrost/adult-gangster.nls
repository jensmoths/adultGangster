

adult-gangsters-own [
  money
]

to setup-adult-gangsters

create-adult-gangsters nbr-of-adult-gangsters[
    set processMsg "processMsgAdultGangster"
    set deliberateIntentions "deliberateIntentionsAdultGangster"
    set observeEnvironment "observeEnvironmentAdultGangster"
    set beliefs ([])
    set intentions ([])
    set incoming-queue ([])
    set size 3
    set shape "mario gangster"
    
    ;;Setting a gang
    ifelse random 100 < 49 
    [add-belief create-belief "gang" red]
    [add-belief create-belief "gang" yellow]
    set color belief-content  read-first-belief-of-type "gang" 
    add-belief create-belief "gangMembers" []
    add-belief create-belief "othergangHideouts" []
    add-belief create-belief "othergangMembers" []
    add-belief create-belief "policeIsNearby" []
    add-belief create-belief "energy" 20
    let R random 100
    ifelse R < 33 [
      
      add-belief create-belief "territory" "lowerclass"
      add-belief create-belief "home" one-of houses with [adult-gangsters-living-here = 0 and class = "lowerclass"]
      ;;add-belief create-belief "status" 50
      ;;add-belief create-belief "money"
    ]
    [
      ifelse R < 67[
        add-belief create-belief "territory" "middleclass"
        add-belief create-belief "home" one-of houses with [adult-gangsters-living-here = 0 and class = "middleclass"]
        ;;add-belief create-belief "status"
        ;;add-belief create-belief "money"
      ][
        add-belief create-belief "territory" "lowerclass"
        add-belief create-belief "home" one-of houses with [adult-gangsters-living-here = 0 and class = "upperclass"]
        ;;add-belief create-belief "status"
        ;;add-belief create-belief "money"
      ] 
   ]
   move-to belief-content read-first-belief-of-type "home"
   ask belief-content read-first-belief-of-type "home" [
     set adult-gangsters-living-here 1
   ] 
   let gang belief-content read-first-belief-of-type "gang"
   add-belief create-belief "gangHideouts" [self] of gang-hideouts with [color = gang]
  ]
update-gangmemberlist
  
end

to observeEnvironmentAdultGangster
end

to processMsgAdultGangster
  if not empty? incoming-queue [
    let msg get-message
    let performative get-performative msg
    let content get-content msg
    let sender get-sender msg
    (ifelse 
      performative = "agree"
      [
        (ifelse
          content = "availableForDelivery"
          [
            handleAvailableForDelivery msg
          ]
          content = "212"[]
    )]
    performative = "request"
      [
       (ifelse
          first content = "orderDrugs"
          [
            add-belief create-belief "wantsDrugs" sender
            set money money + item 1 content
          ]
          content = "212"[]
    )]
      performative = "inform"
      [
       (ifelse
          item 0 content = "delivered"
          [
            add-belief create-belief "deliveredDrugs" item 1 content
          ]
          content = "arrested"
          [
            add-belief create-belief "inPrison" "sentence"
            add-belief create-belief "askedAdults" []  
          ]
          content = "joinedGang"
          [
          set status status + 1
          ]
    )]
  )]  
end

to deliberateIntentionsAdultGangster
  if exist-beliefs-of-type "wantsDrugs"
  [
    let belief get-belief "wantsDrugs" 
    let customer belief-content belief
    add-belief create-belief "deliveringDrugs" customer
    add-intention "requestDelivery" "true"
  ]
  if exist-beliefs-of-type "deliveredDrugs"
  [
    add-intention "sendLocation" "true"
  ]
  if exist-beliefs-of-type "inPrison"
  [
    add-intention "prisonState" "imprisoned"
  ]
  
end



to prisonSta
  print 5
  let msg create-message "request"
  let copyofprisoners []
  foreach adults [ i -> ask i[ if imprisoned [ set copyofprisoners lput i]]]
  show copyofprisoners
  print 5
    
  
  
  
;  let asked belief-content read-first-belief-of-type "askedAdults"
;  foreach asked  [ i -> set copyofprisoners remove i copyofprisoners] 
;  if not empty? copyofprisoners
;  [
;    set msg add-receiver first copyofprisoners msg
;    let nstatus status / calculate-avg-breed-status adult-gangsters
;    let roll random-float nstatus
;    set msg add-content (list "wannabeGangster" roll)  msg
;    send msg
;    set asked fput first copyofprisoners asked
;    update-belief create-belief "askedAdults" asked
;  ] 
end

to-report imprisoned
  report true
end

to requestDelivery
  let msg create-message "request"
  ;;set msg add-multiple-receivers child-gangsters  msg
  set msg add-content "availableToDeliver" msg
  broadcast-to child-gangsters msg self
  add-intention "orderDelivery" "deliveryOrdered" 
  add-belief create-belief "waitingForAvailibilty" ""
end

to orderDelivery
 if exist-beliefs-of-type "availableForDelivery" 
  [
    let msg create-message "inform"
    let reciever belief-content read-first-belief-of-type "availableForDelivery"
    set msg add-receiver reciever  msg
    let content (list "stash" one-of stash-houses "drop" one-of drug-delivery-spots)
    set msg add-content content msg
    send msg
  ]
end

to-report deliveryOrdered
  if exist-beliefs-of-type "availableForDelivery" 
    [
      remove-belief read-first-belief-of-type "availableForDelivery"
      report true
    ]
  report false
end

to sendLocation
  let msg create-message "inform"
  let reciever belief-content get-belief "deliveringDrugs" 
  set msg add-receiver reciever msg
  let dropLocation belief-content get-belief "deliveredDrugs" 
  set msg add-content (list "locationDrugs" dropLocation) msg
  send msg
  set status status + 1
  ;;remove-belief read-first-belief-of-type "deliveredDrugs"
end

to handleAvailableForDelivery [msg]
  ifelse exist-beliefs-of-type "waitingForAvailibilty" 
    [
      let sender get-sender msg
      add-belief create-belief "availableForDelivery" sender
      let x get-belief "waitingForAvailibilty" 
    ]
    [
      let reply create-reply "decline" msg
      set reply add-content "tooLate" reply
      send reply
    ]
end





































to update-gangmemberlist
  ask adult-gangsters[
    let gang belief-content read-first-belief-of-type "gang"
    update-belief create-belief "gangMembers" adult-gangsters with [color = gang];; updatera allas gangMembers
  ]
end

to update-ganghideoutlist[gangColor]
  ask adult-gangsters with [color = gangColor][
    let gang belief-content read-first-belief-of-type "gang"
    update-belief create-belief "gangHideouts" [self] of gang-hideouts with [color = gang]
  ]
end

to add-othergangmember-to-list
  let gang belief-content read-first-belief-of-type "gang"
  foreach [self] of other adult-gangsters-here[x ->
    update-belief create-belief "othergangMembers" lput x belief-content read-first-belief-of-type "othergangMembers"
  ]
end

to add-otherganghideout-to-list
  let gang belief-content read-first-belief-of-type "gang"
  foreach [self] of other adult-gangsters-here[x ->
    update-belief create-belief "othergangHideouts" lput x belief-content read-first-belief-of-type "othergangHideouts"
  ]
end

to observeEnvironment_adultgangster
  ask adult-gangsters[
    let gang belief-content read-first-belief-of-type "gang"
    if(adult-gangsters with [color != gang]  != 0)[
      ask adult-gangsters-here with [color != gang][
        add-othergangmember-to-list
      ]
    ]
  ]
end
;************************************** AMMARS KOD *****************************************
to observeIfPoliceIsNearby
  ask adult-gangsters[
    if any? police in-radius 3[
      update-belief create-belief "policeIsNearby" count police in-radius 3
    ]
  ]
end

to fillUpEnergy
  update-belief create-belief "energy" belief-content read-first-belief-of-type "energy" + 10
end

to checkEnergy
  ifelse (belief-content read-first-belief-of-type "energy" <= 50)[
    add-belief create-belief "tired" true
    add-intention "gohomeAdultGangster" "false"
  ]
  [
    add-belief create-belief "alert" true
    
    add-intention "goToStashHouse" "false"
  ]
end

to gohomeAdultGangster 
  if (belief-content read-first-belief-of-type "tired")[
  move-to belief-content read-first-belief-of-type "home"
    fillUpEnergy  
  ]
  if(distance belief-content read-first-belief-of-type "home" < 1)[
      add-intention "gohomeAdultGangster" "true"
    ]
  
end

to policeAround
  ifelse(belief-content read-first-belief-of-type "policeIsNearby" > 1)[
    ; arrested
  ][
  set heading heading + 180  
   while[belief-content read-first-belief-of-type "policeIsNearby" != 0][
    bk 1
    forward 0.05
   ]
 ]
end

to goToStashHouse
  
  let nearestStashouse one-of gang-hideouts
  foreach belief-content read-first-belief-of-type "gangHideouts" [x -> 
    if distance nearestStashouse > distance x[
     set nearestStashouse x
    ]
  ]
  
  if(belief-content read-first-belief-of-type "alert")[
    face nearestStashouse
    fd 0.05
    
  ]
  
end
