

adult-gangsters-own [
  beliefs
  intentions
  incoming-queue
  observeEnvironment
  processMsg
  reactiveIntention
  deliberateIntentions
  status
  money
]

to setup-adult-gangsters

create-adult-gangsters nbr-of-adult-gangsters[
    set processMsg "processMsgAdultGangster"
    set deliberateIntentions "deliberateIntentionsAdultGangster"
    set observeEnvironment "observeEnvironmentAdultGangster"
    set beliefs ([])
    set intentions ([])
    set incoming-queue ([])
    set size 3
    set shape "mario gangster"
    set status 1
    
    ;;Setting a gang
    ifelse random 100 < 49 
    [add-belief create-belief "gang" red]
    [add-belief create-belief "gang" yellow]
    set color belief-content  read-first-belief-of-type "gang" 
    add-belief create-belief "gangMembers" []
    add-belief create-belief "othergangHideouts" []
    add-belief create-belief "othergangMembers" []
    add-belief create-belief "policeIsNearby" []
    add-belief create-belief "nearestStashHouse" 0
    add-belief create-belief "askedAdults" [] 

    let R random 100
    ifelse R < 33 [
      
      add-belief create-belief "territory" "lowerclass"
      add-belief create-belief "home" one-of houses with [adult-gangsters-living-here = 0 and class = "lowerclass"]
      ;;add-belief create-belief "status" 50
      ;;add-belief create-belief "money"
    ]
    [
      ifelse R < 67[
        add-belief create-belief "territory" "middleclass"
        add-belief create-belief "home" one-of houses with [adult-gangsters-living-here = 0 and class = "middleclass"]
        ;;add-belief create-belief "status"
        ;;add-belief create-belief "money"
      ][
        add-belief create-belief "territory" "lowerclass"
        add-belief create-belief "home" one-of houses with [adult-gangsters-living-here = 0 and class = "upperclass"]
        ;;add-belief create-belief "status"
        ;;add-belief create-belief "money"
      ] 
   ]
   move-to belief-content read-first-belief-of-type "home"
   ask belief-content read-first-belief-of-type "home" [
     set adult-gangsters-living-here 1
   ] 
   let gang belief-content read-first-belief-of-type "gang"
   add-belief create-belief "gangHideouts" [self] of gang-hideouts with [color = gang]
  ]
update-gangmemberlist  
end

to createNewAdultGangster [newgang territory oldmoney]
  create-adult-gangsters 1[
    set processMsg "processMsgAdultGangster"
    set deliberateIntentions "deliberateIntentionsAdultGangster"
    set observeEnvironment "observeEnvironmentAdultGangster"
    set beliefs ([])
    set intentions ([])
    set incoming-queue ([])
    set size 3
    set shape "mario gangster"
    set status 1
    add-belief create-belief "gang" newgang
    add-belief create-belief "territory" territory
    set money oldmoney
    
    set color belief-content  read-first-belief-of-type "gang" 
    add-belief create-belief "gangMembers" []
    add-belief create-belief "othergangHideouts" []
    add-belief create-belief "othergangMembers" []
    add-belief create-belief "policeIsNearby" []
    add-belief create-belief "nearestStashHouse" 0
    add-belief create-belief "askedAdults" []
    
   
   
   move-to belief-content read-first-belief-of-type "home"
   ask belief-content read-first-belief-of-type "home" [
   set adult-gangsters-living-here 1
   ] 
   let gang belief-content read-first-belief-of-type "gang"
   add-belief create-belief "gangHideouts" [self] of gang-hideouts with [color = gang]
  ]
update-gangmemberlist
end 

to update-gangmemberlist
  ask adult-gangsters[
    let gang belief-content read-first-belief-of-type "gang"
    update-belief create-belief "gangMembers" adult-gangsters with [color = gang];; updatera allas gangMembers
  ]
end
to update-ganghideoutlist[gangColor]
  ask adult-gangsters with [color = gangColor][
    let gang belief-content read-first-belief-of-type "gang"
    update-belief create-belief "gangHideouts" [self] of gang-hideouts with [color = gang]
  ]
end
to add-othergangmember-to-list
  let gang belief-content read-first-belief-of-type "gang"
  foreach [self] of other adult-gangsters in-radius 2[x ->
    ;;if not (belief-content read-first-belief-of-type "othergangMembers" member? )[
      update-belief create-belief "othergangMembers" lput x belief-content read-first-belief-of-type "othergangMembers"
  ]
end

to add-otherganghideout-to-list
  let gang belief-content read-first-belief-of-type "gang"
  foreach [self] of other gang-Hideouts-here[x ->
    update-belief create-belief "othergangHideouts" lput x belief-content read-first-belief-of-type "othergangHideouts"
  ]
end

to observeEnvironmentAdultGangster
    checkTimeAndPlace
  observeIfPoliceIsNearby
    let gang belief-content read-first-belief-of-type "gang"
    if(count adult-gangsters in-radius 7 with [color != gang] != 0)[
      add-othergangmember-to-list
    ]
  
  
end





to processMsgAdultGangster
  if not empty? incoming-queue [
    let msg get-message
    let performative get-performative msg
    let content get-content msg
    let sender get-sender msg
    (ifelse 
      performative = "agree"
      [
        (ifelse
          content = "availableForDelivery"
          [
            handleAvailableForDelivery msg
          ]
          content = "212"[]
    )]
    performative = "request"
      [
       (ifelse
          first content = "orderDrugs"
          [
            add-belief create-belief "wantsDrugs" sender
            set money money + 30
          ]
          content = "212"[]
    )]
      performative = "inform"
      [
       (ifelse
          item 0 content = "delivered"
          [
            add-belief create-belief "deliveredDrugs" item 1 content
          ]
          content = "arrested"
          [
            add-belief create-belief "inPrison" "sentence"
            add-belief create-belief "askedAdults" []  
          ]
          content = "joinedGang"
          [
          set status status + 1
          ]
    )]
  )]  
end

to deliberateIntentionsAdultGangster
  if exist-beliefs-of-type "wantsDrugs"
  [
    let belief get-belief "wantsDrugs" 
    let customer belief-content belief
    add-belief create-belief "deliveringDrugs" customer
    add-intention "requestDelivery" "true"
  ]
  if exist-beliefs-of-type "deliveredDrugs"
  [
    add-intention "sendLocation" "true"
  ]
  if exist-beliefs-of-type "inPrison"
  [
    add-intention "prisonState" "imprisoned"
  ]  
  if exist-beliefs-of-type "go"
  [
    let content belief-content get-belief "go"
    if content = "home"[
    add-intention "gohomeAdultGangster" "true"
    ]
    if content = "stashhouse"[
      add-intention "goToStashHouse" "true"
      
    ]
  ]
  if exist-beliefs-of-type "policeIsNearby"
  [
    add-intention "policeAround" "true"
  ]   
end



to prisonState
  let msg create-message "request"
  let copyofprisoners []
  ask adults [if imprisonedAdult [ set copyofprisoners fput who copyofprisoners]]

  
  let asked belief-content read-first-belief-of-type "askedAdults"
  foreach asked  [ i -> set copyofprisoners remove i copyofprisoners]
  if not empty? copyofprisoners
  [
    set msg add-receiver first copyofprisoners msg
    let nstatus status / calculate-avg-breed-status adult-gangsters
    let roll random-float nstatus
    set msg add-content (list "wannabeGangster" roll)  msg
    send msg
    set asked fput first copyofprisoners asked
    update-belief create-belief "askedAdults" asked
  ]
end

to-report imprisoned
  report true
end

to requestDelivery
  let msg create-message "request"
  ;;set msg add-multiple-receivers child-gangsters  msg
  set msg add-content "availableToDeliver" msg
  broadcast-to child-gangsters msg self
  add-intention "orderDelivery" "deliveryOrdered" 
  add-belief create-belief "waitingForAvailibilty" ""
end

to orderDelivery
 if exist-beliefs-of-type "availableForDelivery" 
  [
    let msg create-message "inform"
    let reciever belief-content read-first-belief-of-type "availableForDelivery"
    set msg add-receiver reciever  msg
    let content (list "stash" one-of stash-houses "drop" one-of drug-delivery-spots)
    set msg add-content content msg
    send msg
  ]
end

to-report deliveryOrdered
  if exist-beliefs-of-type "availableForDelivery" 
    [
      remove-belief read-first-belief-of-type "availableForDelivery"
      report true
    ]
  report false
end

to sendLocation
  let msg create-message "inform"
  let reciever belief-content get-belief "deliveringDrugs" 
  set msg add-receiver reciever msg
  let dropLocation belief-content get-belief "deliveredDrugs" 
  set msg add-content (list "locationDrugs" dropLocation) msg
  send msg
  set status status + 1
  ;;remove-belief read-first-belief-of-type "deliveredDrugs"
end

to handleAvailableForDelivery [msg]
  ifelse exist-beliefs-of-type "waitingForAvailibilty" 
    [
      let sender get-sender msg
      add-belief create-belief "availableForDelivery" sender
      let x get-belief "waitingForAvailibilty" 
    ]
    [
      let reply create-reply "decline" msg
      set reply add-content "tooLate" reply
      send reply
    ]
end





































;************************************** AMMARS KOD *****************************************
to observeIfPoliceIsNearby

    if any? police in-radius 3[
      add-belief create-belief "policeIsNearby" count police in-radius 3
    ]
  
end

to checkTimeAndPlace 
 let nearestStashouse one-of belief-content read-first-belief-of-type "gangHideouts"
  
    foreach belief-content read-first-belief-of-type "gangHideouts" [x -> 
      if distance nearestStashouse > distance x [
        set nearestStashouse x
      ]
    ]
   add-belief create-belief "nearestStashHouse" nearestStashouse
  ifelse((time > 1200))
  [
    
  
  
      if distance belief-content read-first-belief-of-type "nearestStashHouse" >= 1[
      add-belief create-belief "go" "stashhouse"
        
      
    ]
      ]
  [if distance belief-content read-first-belief-of-type "home" >= 1[ 
    add-belief create-belief "go" "home"]]
  
    
  
  
  
end


to gohomeAdultGangster 
  face belief-content read-first-belief-of-type "home"
  fd 1


end

to policeAround
  face one-of police in-radius 3
  right random 100 + 120
  forward 1
 
end

to goToStashHouse
 
  face belief-content get-belief  "nearestStashHouse"  
  fd 1


end